[versions]
assertj = "3.23.1"
classgraph = "4.8.165"
contract-messaging-tenant-v1 = "1.0.0"
coroutines = "1.6.4"
datadog = "1.30.0"
hazelcast = "5.3.6"
jackson = "2.15.2"
jetbrains-annotations = "24.1.0"
junit = "5.10.1"
kafka = "3.2.1"
kotlinlogging = "3.0.5"
logback = "1.4.5"
micrometer = "1.10.4"
mockk = "1.13.5"
mysql = "8.0.33"
nimbus-jose = "9.24.4"
ocisdk = "3.35.0"
okhttp = "4.10.0"
opentracing = "0.33.0"
resilience4j = "2.0.2"
slf4j = "2.0.6"
spring = "6.0.11"
spring-security = "6.0.6"
testcontainers = "1.19.4"
testcontainers-wiremock = "1.0-alpha-13"
wiremock = "3.3.1"


[libraries]
classgraph = { module = "io.github.classgraph:classgraph", version.ref = "classgraph" }
contract-messaging-tenant-v1 = { module = "com.projectronin.contract.event.tenant:contract-messaging-tenant-v1", version.ref = "contract-messaging-tenant-v1" }
datadog-api = { module = "com.datadoghq:dd-trace-api", version.ref = "datadog" }
hazelcast = { module = "com.hazelcast:hazelcast", version.ref = "hazelcast" }
jackson-kotlin = { module = "com.fasterxml.jackson.module:jackson-module-kotlin", version.ref = "jackson" }
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
jackson-module-parameterNames = { module = "com.fasterxml.jackson.module:jackson-module-parameter-names", version.ref = "jackson" }
jetbrains-annotations = { module = "org.jetbrains:annotations", version.ref = "jetbrains-annotations" }
kafka-clients = { module = "org.apache.kafka:kafka-clients", version.ref = "kafka" }
kafka-streams = { module = "org.apache.kafka:kafka-streams", version.ref = "kafka" }
kafka-streams-test-utils = { module = "org.apache.kafka:kafka-streams-test-utils", version.ref = "kafka" }
kotlin-logging = { module = "io.github.microutils:kotlin-logging-jvm", version.ref = "kotlinlogging" }
kotlinx-coroutines-core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
logback-classic = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
logback-core = { module = "ch.qos.logback:logback-core", version.ref = "logback" }
micrometer-statsd = { module = "io.micrometer:micrometer-registry-statsd", version.ref = "micrometer" }
mysql-connector = { module = "com.mysql:mysql-connector-j", version.ref="mysql" }
nimbus-jose-jwt =  { module = "com.nimbusds:nimbus-jose-jwt", version.ref = "nimbus-jose" }
ocisdk-addons-apache = { module = "com.oracle.oci.sdk:oci-java-sdk-addons-apache" }
ocisdk-addons-apache-jersey3 = { module = "com.oracle.oci.sdk:oci-java-sdk-addons-apache-configurator-jersey3" }
ocisdk-addons-resteasy = { module = "com.oracle.oci.sdk:oci-java-sdk-addons-resteasy-client-configurator" }
ocisdk-bom = { module = "com.oracle.oci.sdk:oci-java-sdk-bom", version.ref = "ocisdk" }
ocisdk-circuitbreaker = { module = "com.oracle.oci.sdk:oci-java-sdk-circuitbreaker" }
ocisdk-common = { module = "com.oracle.oci.sdk:oci-java-sdk-common" }
ocisdk-common-httpclient-jersey3 = { module = "com.oracle.oci.sdk:oci-java-sdk-common-httpclient-jersey3" }
ocisdk-encryption = { module = "com.oracle.oci.sdk:oci-java-sdk-encryption"}
ocisdk-keymanagement = { module = "com.oracle.oci.sdk:oci-java-sdk-keymanagement" }
ocisdk-objectstorage = { module = "com.oracle.oci.sdk:oci-java-sdk-objectstorage" }
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
opentracing-util = { module = "io.opentracing:opentracing-util", version.ref = "opentracing" }
resilience4j-kotlin = { module = "io.github.resilience4j:resilience4j-kotlin", version.ref = "resilience4j" }
resilience4j-micrometer = { module = "io.github.resilience4j:resilience4j-micrometer", version.ref = "resilience4j" }
resilience4j-retry = { module = "io.github.resilience4j:resilience4j-retry", version.ref = "resilience4j" }
resilience4j-circuitbreaker = { module = "io.github.resilience4j:resilience4j-circuitbreaker", version.ref = "resilience4j" }
slf4j-api = { module = "org.slf4j:slf4j-api", version.ref = "slf4j" }
spring-context = { module = "org.springframework:spring-context", version.ref = "spring" }
spring-core = { module = "org.springframework:spring-core", version.ref = "spring" }
spring-security-core = { module = "org.springframework.security:spring-security-core", version.ref = "spring-security" }


# Test Libraries
assertj = { module = "org.assertj:assertj-core", version.ref = "assertj" }
junit-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
kotlinx-coroutines-test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }
testcontainers-core = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-junit = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
testcontainers-kafka = { module = "org.testcontainers:kafka", version.ref = "testcontainers" }
testcontainers-mysql = { module = "org.testcontainers:mysql", version.ref = "testcontainers" }
testcontainers-wiremock = { module = "org.wiremock.integrations.testcontainers:wiremock-testcontainers-module", version.ref = "testcontainers-wiremock" }
wiremock = { module = "org.wiremock:wiremock-standalone", version.ref = "wiremock" }


[bundles]
circuitbreaker = ["resilience4j-kotlin", "resilience4j-circuitbreaker", "resilience4j-micrometer"]
jackson = ["jackson-kotlin", "jackson-datatype-jsr310", "jackson-module-parameterNames"]
retry = ["resilience4j-kotlin", "resilience4j-retry", "resilience4j-micrometer"]
testcontainers = ["testcontainers-core", "testcontainers-mysql", "testcontainers-kafka", "testcontainers-junit", "testcontainers-wiremock"]


[plugins]
